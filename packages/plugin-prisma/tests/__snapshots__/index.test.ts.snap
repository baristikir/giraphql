// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prisma generates schema 1`] = `
"type BaseError implements Error {
  message: String!
}

type Comment {
  author: User!
  authorBio: String
  content: String!
  id: ID!
  post: Post!
}

interface Error {
  message: String!
}

interface Named {
  name: String
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  commentAuthorIds: [ID!]!
  comments: [Comment!]!
  commentsConnection(after: ID, before: ID, first: Int, last: Int): PostCommentsConnection!
  content: String
  createdAt: String!
  id: ID!
  ownComments: [Comment!]!
  ownCommentsConnection(after: ID, before: ID, first: Int, last: Int): PostOwnCommentsConnection!
  post: User!
  title: String!
}

type PostCommentsConnection {
  edges: [PostCommentsConnectionEdge]!
  pageInfo: PageInfo!
}

type PostCommentsConnectionEdge {
  cursor: String!
  node: Comment!
}

type PostOwnCommentsConnection {
  edges: [PostOwnCommentsConnectionEdge]!
  pageInfo: PageInfo!
}

type PostOwnCommentsConnectionEdge {
  cursor: String!
  node: Comment!
}

type Profile {
  bio: String
  id: ID!
  user: User
}

type Query {
  me: User
  named: [Named]
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  post(id: ID!): Post
  posts: [Post!]!
  unrelatedConnection(after: ID, before: ID, first: Int, last: Int): QueryUnrelatedConnection!
  userConnection(after: ID, before: ID, first: Int, last: Int): QueryUserConnection!
  userConnectionWithErrors(after: ID, before: ID, first: Int, last: Int): QueryUserConnectionWithErrorsResult!
  userOrProfile: [UserOrProfile]
  users: [User!]!
  usersWithError: QueryUsersWithErrorResult!
  viewer: Viewer!
}

type QueryUnrelatedConnection {
  edges: [QueryUnrelatedConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUnrelatedConnectionEdge {
  cursor: String!
  node: Unrelated!
}

type QueryUserConnection {
  edges: [QueryUserConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUserConnectionEdge {
  cursor: String!
  node: User!
}

type QueryUserConnectionWithErrorsConnection {
  edges: [QueryUserConnectionWithErrorsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUserConnectionWithErrorsConnectionEdge {
  cursor: String!
  node: User!
}

union QueryUserConnectionWithErrorsResult = BaseError | QueryUserConnectionWithErrorsSuccess

type QueryUserConnectionWithErrorsSuccess {
  data: QueryUserConnectionWithErrorsConnection!
}

union QueryUsersWithErrorResult = BaseError | QueryUsersWithErrorSuccess

type QueryUsersWithErrorSuccess {
  data: [User!]!
}

type Unrelated {
  id: ID!
  name: String
}

type User implements Named & Node {
  commentedPosts: [Post!]!
  commentedPostsConnection(after: ID, before: ID, first: Int, last: Int): UserCommentedPostsConnection!
  commentsConnection(after: ID, before: ID, first: Int, last: Int): UserCommentsConnection!
  email: String!
  id: ID!
  name: String
  postCount: Int!
  posts(oldestFirst: Boolean): [Post!]!
  postsConnection(after: ID, before: ID, first: Int, last: Int, oldestFirst: Boolean): UserPostsConnection!
  postsConnectionWithErrors(after: ID, before: ID, first: Int, last: Int): UserPostsConnectionWithErrorsResult!
  profile: Profile
  profileThroughManualLookup: Profile
  profileWithErrors: UserProfileWithErrorsResult
  viewer: Viewer!
}

type UserCommentedPostsConnection {
  edges: [UserCommentedPostsConnectionEdge]!
  pageInfo: PageInfo!
}

type UserCommentedPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type UserCommentsConnection {
  edges: [UserCommentsConnectionEdge]!
  pageInfo: PageInfo!
}

type UserCommentsConnectionEdge {
  cursor: String!
  node: Comment!
}

union UserOrProfile = Profile | User

type UserPostsConnection {
  edges: [UserPostsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type UserPostsConnectionWithErrorsConnection {
  edges: [UserPostsConnectionWithErrorsConnectionEdge]!
  pageInfo: PageInfo!
}

type UserPostsConnectionWithErrorsConnectionEdge {
  cursor: String!
  node: Post!
}

union UserPostsConnectionWithErrorsResult = BaseError | UserPostsConnectionWithErrorsSuccess

type UserPostsConnectionWithErrorsSuccess {
  data: UserPostsConnectionWithErrorsConnection!
}

union UserProfileWithErrorsResult = BaseError | UserProfileWithErrorsSuccess

type UserProfileWithErrorsSuccess {
  data: Profile!
}

type Viewer {
  bio: String
  id: ID!
  posts: [Post!]!
  user: User!
}"
`;

exports[`prisma queries for list with nested relations 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "name": "Maurine Ratke",
        "posts": Array [
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "250",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "249",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "248",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "247",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "246",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "245",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "244",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "243",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "242",
          },
          Object {
            "author": Object {
              "profile": Object {
                "id": "1",
              },
            },
            "id": "241",
          },
        ],
        "profile": Object {
          "bio": "Sequi minus inventore itaque similique et.",
        },
      },
      Object {
        "name": "Nichole Koss",
        "posts": Array [
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "500",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "499",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "498",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "497",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "496",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "495",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "494",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "493",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "492",
          },
          Object {
            "author": Object {
              "profile": null,
            },
            "id": "491",
          },
        ],
        "profile": null,
      },
    ],
  },
}
`;

exports[`prisma queries for record with nested relations 1`] = `
Object {
  "data": Object {
    "me": Object {
      "posts": Array [
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
        Object {
          "author": Object {
            "profile": Object {
              "bio": "Sequi minus inventore itaque similique et.",
            },
          },
        },
      ],
    },
  },
}
`;

exports[`prisma queries with arguments and aliases 1`] = `
Object {
  "data": Object {
    "me": Object {
      "oldestPosts": Array [
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "1",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "2",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "3",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "4",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "5",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "6",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "7",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "8",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "9",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "10",
        },
      ],
      "posts": Array [
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "250",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "249",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "248",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "247",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "246",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "245",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "244",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "243",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "242",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "241",
        },
      ],
    },
  },
}
`;

exports[`prisma queries with variables and alieases 1`] = `
Object {
  "data": Object {
    "me": Object {
      "oldestPosts": Array [
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "1",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "2",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "3",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "4",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "5",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "6",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "7",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "8",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "9",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "10",
        },
      ],
      "postIds": Array [
        Object {
          "id": "250",
        },
        Object {
          "id": "249",
        },
        Object {
          "id": "248",
        },
        Object {
          "id": "247",
        },
        Object {
          "id": "246",
        },
        Object {
          "id": "245",
        },
        Object {
          "id": "244",
        },
        Object {
          "id": "243",
        },
        Object {
          "id": "242",
        },
        Object {
          "id": "241",
        },
      ],
      "posts": Array [
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "250",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "249",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "248",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "247",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "246",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "245",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "244",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "243",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "242",
        },
        Object {
          "author": Object {
            "id": "VXNlcjox",
          },
          "id": "241",
        },
      ],
    },
  },
}
`;
